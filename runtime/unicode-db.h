// generated by generate_unicode_database.py
#pragma once

#include <cstdint>

#include "globals.h"

namespace py {

static const int kMaxNameLength = 256;

static const int32_t kAliasesStart = 0xf0000;
static const int32_t kAliasesEnd = 0xf01d4;
static const int32_t kNamedSequencesStart = 0xf0200;
static const int32_t kNamedSequencesEnd = 0xf03ba;

static const int32_t kHangulSyllableStart = 0xac00;
static const int32_t kHangulLeadingStart = 0x1100;
static const int32_t kHangulVowelStart = 0x1161;
static const int32_t kHangulTrailingStart = 0x11a7;

static const word kHangulLeadingCount = 19;
static const word kHangulVowelCount = 21;
static const word kHangulTrailingCount = 28;
static const word kHangulCodaCount = kHangulVowelCount * kHangulTrailingCount;
static const word kHangulSyllableCount = kHangulLeadingCount * kHangulCodaCount;

enum : int32_t {
  kAlphaMask = 0x1,
  kDecimalMask = 0x2,
  kDigitMask = 0x4,
  kLowerMask = 0x8,
  kLinebreakMask = 0x10,
  kSpaceMask = 0x20,
  kTitleMask = 0x40,
  kUpperMask = 0x80,
  kXidStartMask = 0x100,
  kXidContinueMask = 0x200,
  kPrintableMask = 0x400,
  kNumericMask = 0x800,
  kCaseIgnorableMask = 0x1000,
  kCasedMask = 0x2000,
  kExtendedCaseMask = 0x4000,
};

struct UnicodeTypeRecord {
  // Deltas to the character or offsets in kExtendedCase
  const int32_t upper;
  const int32_t lower;
  const int32_t title;
  // Note: if more flag space is needed, decimal and digit could be unified
  const int8_t decimal;
  const int8_t digit;
  const int16_t flags;
};

// Get a code point from its Unicode name.
// Returns the code point if the lookup succeeds, -1 if it fails.
int32_t codePointFromName(const byte* name, word size);
int32_t codePointFromNameOrNamedSequence(const byte* name, word size);

// Write the Unicode name for the given code point into the buffer.
// Returns true if the name was written successfully, false otherwise.
bool nameFromCodePoint(int32_t code_point, byte* buffer, word size);

const UnicodeTypeRecord* typeRecord(int32_t code_point);

}  // namespace py
