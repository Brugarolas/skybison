#pragma once

namespace python {

/*
 Define the set of bytes codes
 The first marcro parmaeter, V, is for primary names
 of byte codes and the second ALIAS is used to capture a value
 or position in the enumeration as a secondary name.
 */
#define FOREACH_BYTECODE(V)            \
  V(UNUSED_BYTECODE_0, 0)              \
  V(POP_TOP, 1)                        \
  V(ROT_TWO, 2)                        \
  V(ROT_THREE, 3)                      \
  V(DUP_TOP, 4)                        \
  V(DUP_TOP_TWO, 5)                    \
  V(UNUSED_BYTECODE_6, 6)              \
  V(UNUSED_BYTECODE_7, 7)              \
  V(UNUSED_BYTECODE_8, 8)              \
  V(NOP, 9)                            \
  V(UNARY_POSITIVE, 10)                \
  V(UNARY_NEGATIVE, 11)                \
  V(UNARY_NOT, 12)                     \
  V(UNUSED_BYTECODE_13, 13)            \
  V(UNUSED_BYTECODE_14, 14)            \
  V(UNARY_INVERT, 15)                  \
  V(BINARY_MATRIX_MULTIPLY, 16)        \
  V(INPLACE_MATRIX_MULTIPLY, 17)       \
  V(UNUSED_BYTECODE_18, 18)            \
  V(BINARY_POWER, 19)                  \
  V(BINARY_MULTIPLY, 20)               \
  V(UNUSED_BYTECODE_21, 21)            \
  V(BINARY_MODULO, 22)                 \
  V(BINARY_ADD, 23)                    \
  V(BINARY_SUBTRACT, 24)               \
  V(BINARY_SUBSCR, 25)                 \
  V(BINARY_FLOOR_DIVIDE, 26)           \
  V(BINARY_TRUE_DIVIDE, 27)            \
  V(INPLACE_FLOOR_DIVIDE, 28)          \
  V(INPLACE_TRUE_DIVIDE, 29)           \
  V(UNUSED_BYTECODE_30, 30)            \
  V(UNUSED_BYTECODE_31, 31)            \
  V(UNUSED_BYTECODE_32, 32)            \
  V(UNUSED_BYTECODE_33, 33)            \
  V(UNUSED_BYTECODE_34, 34)            \
  V(UNUSED_BYTECODE_35, 35)            \
  V(UNUSED_BYTECODE_36, 36)            \
  V(UNUSED_BYTECODE_37, 37)            \
  V(UNUSED_BYTECODE_38, 38)            \
  V(UNUSED_BYTECODE_39, 39)            \
  V(UNUSED_BYTECODE_40, 40)            \
  V(UNUSED_BYTECODE_41, 41)            \
  V(UNUSED_BYTECODE_42, 42)            \
  V(UNUSED_BYTECODE_43, 43)            \
  V(UNUSED_BYTECODE_44, 44)            \
  V(UNUSED_BYTECODE_45, 45)            \
  V(UNUSED_BYTECODE_46, 46)            \
  V(UNUSED_BYTECODE_47, 47)            \
  V(UNUSED_BYTECODE_48, 48)            \
  V(UNUSED_BYTECODE_49, 49)            \
  V(GET_AITER, 50)                     \
  V(GET_ANEXT, 51)                     \
  V(BEFORE_ASYNC_WITH, 52)             \
  V(UNUSED_BYTECODE_53, 53)            \
  V(UNUSED_BYTECODE_54, 54)            \
  V(INPLACE_ADD, 55)                   \
  V(INPLACE_SUBTRACT, 56)              \
  V(INPLACE_MULTIPLY, 57)              \
  V(UNUSED_BYTECODE_58, 58)            \
  V(INPLACE_MODULO, 59)                \
  V(STORE_SUBSCR, 60)                  \
  V(DELETE_SUBSCR, 61)                 \
  V(BINARY_LSHIFT, 62)                 \
  V(BINARY_RSHIFT, 63)                 \
  V(BINARY_AND, 64)                    \
  V(BINARY_XOR, 65)                    \
  V(BINARY_OR, 66)                     \
  V(INPLACE_POWER, 67)                 \
  V(GET_ITER, 68)                      \
  V(GET_YIELD_FROM_ITER, 69)           \
  V(PRINT_EXPR, 70)                    \
  V(LOAD_BUILD_CLASS, 71)              \
  V(YIELD_FROM, 72)                    \
  V(GET_AWAITABLE, 73)                 \
  V(UNUSED_BYTECODE_74, 74)            \
  V(INPLACE_LSHIFT, 75)                \
  V(INPLACE_RSHIFT, 76)                \
  V(INPLACE_AND, 77)                   \
  V(INPLACE_XOR, 78)                   \
  V(INPLACE_OR, 79)                    \
  V(BREAK_LOOP, 80)                    \
  V(WITH_CLEANUP_START, 81)            \
  V(WITH_CLEANUP_FINISH, 82)           \
  V(RETURN_VALUE, 83)                  \
  V(IMPORT_STAR, 84)                   \
  V(SETUP_ANNOTATIONS, 85)             \
  V(YIELD_VALUE, 86)                   \
  V(POP_BLOCK, 87)                     \
  V(END_FINALLY, 88)                   \
  V(POP_EXCEPT, 89)                    \
  V(STORE_NAME, 90)                    \
  V(DELETE_NAME, 91)                   \
  V(UNPACK_SEQUENCE, 92)               \
  V(FOR_ITER, 93)                      \
  V(UNPACK_EX, 94)                     \
  V(STORE_ATTR, 95)                    \
  V(DELETE_ATTR, 96)                   \
  V(STORE_GLOBAL, 97)                  \
  V(DELETE_GLOBAL, 98)                 \
  V(UNUSED_BYTECODE_99, 99)            \
  V(LOAD_CONST, 100)                   \
  V(LOAD_NAME, 101)                    \
  V(BUILD_TUPLE, 102)                  \
  V(BUILD_LIST, 103)                   \
  V(BUILD_SET, 104)                    \
  V(BUILD_MAP, 105)                    \
  V(LOAD_ATTR, 106)                    \
  V(COMPARE_OP, 107)                   \
  V(IMPORT_NAME, 108)                  \
  V(IMPORT_FROM, 109)                  \
  V(JUMP_FORWARD, 110)                 \
  V(JUMP_IF_FALSE_OR_POP, 111)         \
  V(JUMP_IF_TRUE_OR_POP, 112)          \
  V(JUMP_ABSOLUTE, 113)                \
  V(POP_JUMP_IF_FALSE, 114)            \
  V(POP_JUMP_IF_TRUE, 115)             \
  V(LOAD_GLOBAL, 116)                  \
  V(UNUSED_BYTECODE_117, 117)          \
  V(UNUSED_BYTECODE_118, 118)          \
  V(CONTINUE_LOOP, 119)                \
  V(SETUP_LOOP, 120)                   \
  V(SETUP_EXCEPT, 121)                 \
  V(SETUP_FINALLY, 122)                \
  V(UNUSED_BYTECODE_123, 123)          \
  V(LOAD_FAST, 124)                    \
  V(STORE_FAST, 125)                   \
  V(DELETE_FAST, 126)                  \
  V(STORE_ANNOTATION, 127)             \
  V(UNUSED_BYTECODE_128, 128)          \
  V(UNUSED_BYTECODE_129, 129)          \
  V(RAISE_VARARGS, 130)                \
  V(CALL_FUNCTION, 131)                \
  V(MAKE_FUNCTION, 132)                \
  V(BUILD_SLICE, 133)                  \
  V(UNUSED_BYTECODE_134, 134)          \
  V(LOAD_CLOSURE, 135)                 \
  V(LOAD_DEREF, 136)                   \
  V(STORE_DEREF, 137)                  \
  V(DELETE_DEREF, 138)                 \
  V(UNUSED_BYTECODE_139, 139)          \
  V(UNUSED_BYTECODE_140, 140)          \
  V(CALL_FUNCTION_KW, 141)             \
  V(CALL_FUNCTION_EX, 142)             \
  V(SETUP_WITH, 143)                   \
  V(EXTENDED_ARG, 144)                 \
  V(LIST_APPEND, 145)                  \
  V(SET_ADD, 146)                      \
  V(MAP_ADD, 147)                      \
  V(LOAD_CLASSDEREF, 148)              \
  V(BUILD_LIST_UNPACK, 149)            \
  V(BUILD_MAP_UNPACK, 150)             \
  V(BUILD_MAP_UNPACK_WITH_CALL, 151)   \
  V(BUILD_TUPLE_UNPACK, 152)           \
  V(BUILD_SET_UNPACK, 153)             \
  V(SETUP_ASYNC_WITH, 154)             \
  V(FORMAT_VALUE, 155)                 \
  V(BUILD_CONST_KEY_MAP, 156)          \
  V(BUILD_STRING, 157)                 \
  V(BUILD_TUPLE_UNPACK_WITH_CALL, 158) \
  V(UNUSED_BYTECODE_159, 159)          \
  V(LOAD_METHOD, 160)                  \
  V(CALL_METHOD, 161)                  \
  V(UNUSED_BYTECODE_162, 162)          \
  V(UNUSED_BYTECODE_163, 163)          \
  V(UNUSED_BYTECODE_164, 164)          \
  V(UNUSED_BYTECODE_165, 165)          \
  V(UNUSED_BYTECODE_166, 166)          \
  V(UNUSED_BYTECODE_167, 167)          \
  V(UNUSED_BYTECODE_168, 168)          \
  V(UNUSED_BYTECODE_169, 169)          \
  V(UNUSED_BYTECODE_170, 170)          \
  V(UNUSED_BYTECODE_171, 171)          \
  V(UNUSED_BYTECODE_172, 172)          \
  V(UNUSED_BYTECODE_173, 173)          \
  V(UNUSED_BYTECODE_174, 174)          \
  V(UNUSED_BYTECODE_175, 175)          \
  V(UNUSED_BYTECODE_176, 176)          \
  V(UNUSED_BYTECODE_177, 177)          \
  V(UNUSED_BYTECODE_178, 178)          \
  V(UNUSED_BYTECODE_179, 179)          \
  V(UNUSED_BYTECODE_180, 180)          \
  V(UNUSED_BYTECODE_181, 181)          \
  V(UNUSED_BYTECODE_182, 182)          \
  V(UNUSED_BYTECODE_183, 183)          \
  V(UNUSED_BYTECODE_184, 184)          \
  V(UNUSED_BYTECODE_185, 185)          \
  V(UNUSED_BYTECODE_186, 186)          \
  V(UNUSED_BYTECODE_187, 187)          \
  V(UNUSED_BYTECODE_188, 188)          \
  V(UNUSED_BYTECODE_189, 189)          \
  V(UNUSED_BYTECODE_190, 190)          \
  V(UNUSED_BYTECODE_191, 191)          \
  V(UNUSED_BYTECODE_192, 192)          \
  V(UNUSED_BYTECODE_193, 193)          \
  V(UNUSED_BYTECODE_194, 194)          \
  V(UNUSED_BYTECODE_195, 195)          \
  V(UNUSED_BYTECODE_196, 196)          \
  V(UNUSED_BYTECODE_197, 197)          \
  V(UNUSED_BYTECODE_198, 198)          \
  V(UNUSED_BYTECODE_199, 199)          \
  V(UNUSED_BYTECODE_200, 200)          \
  V(UNUSED_BYTECODE_201, 201)          \
  V(UNUSED_BYTECODE_202, 202)          \
  V(UNUSED_BYTECODE_203, 203)          \
  V(UNUSED_BYTECODE_204, 204)          \
  V(UNUSED_BYTECODE_205, 205)          \
  V(UNUSED_BYTECODE_206, 206)          \
  V(UNUSED_BYTECODE_207, 207)          \
  V(UNUSED_BYTECODE_208, 208)          \
  V(UNUSED_BYTECODE_209, 209)          \
  V(UNUSED_BYTECODE_210, 210)          \
  V(UNUSED_BYTECODE_211, 211)          \
  V(UNUSED_BYTECODE_212, 212)          \
  V(UNUSED_BYTECODE_213, 213)          \
  V(UNUSED_BYTECODE_214, 214)          \
  V(UNUSED_BYTECODE_215, 215)          \
  V(UNUSED_BYTECODE_216, 216)          \
  V(UNUSED_BYTECODE_217, 217)          \
  V(UNUSED_BYTECODE_218, 218)          \
  V(UNUSED_BYTECODE_219, 219)          \
  V(UNUSED_BYTECODE_220, 220)          \
  V(UNUSED_BYTECODE_221, 221)          \
  V(UNUSED_BYTECODE_222, 222)          \
  V(UNUSED_BYTECODE_223, 223)          \
  V(UNUSED_BYTECODE_224, 224)          \
  V(UNUSED_BYTECODE_225, 225)          \
  V(UNUSED_BYTECODE_226, 226)          \
  V(UNUSED_BYTECODE_227, 227)          \
  V(UNUSED_BYTECODE_228, 228)          \
  V(UNUSED_BYTECODE_229, 229)          \
  V(UNUSED_BYTECODE_230, 230)          \
  V(UNUSED_BYTECODE_231, 231)          \
  V(UNUSED_BYTECODE_232, 232)          \
  V(UNUSED_BYTECODE_233, 233)          \
  V(UNUSED_BYTECODE_234, 234)          \
  V(UNUSED_BYTECODE_235, 235)          \
  V(UNUSED_BYTECODE_236, 236)          \
  V(UNUSED_BYTECODE_237, 237)          \
  V(UNUSED_BYTECODE_238, 238)          \
  V(UNUSED_BYTECODE_239, 239)          \
  V(UNUSED_BYTECODE_240, 240)          \
  V(UNUSED_BYTECODE_241, 241)          \
  V(UNUSED_BYTECODE_242, 242)          \
  V(UNUSED_BYTECODE_243, 243)          \
  V(UNUSED_BYTECODE_244, 244)          \
  V(UNUSED_BYTECODE_245, 245)          \
  V(UNUSED_BYTECODE_246, 246)          \
  V(UNUSED_BYTECODE_247, 247)          \
  V(UNUSED_BYTECODE_248, 248)          \
  V(UNUSED_BYTECODE_249, 249)          \
  V(UNUSED_BYTECODE_250, 250)          \
  V(UNUSED_BYTECODE_251, 251)          \
  V(UNUSED_BYTECODE_252, 252)          \
  V(UNUSED_BYTECODE_253, 253)          \
  V(UNUSED_BYTECODE_254, 254)          \
  V(UNUSED_BYTECODE_255, 255)          \
  V(UNUSED_BYTECODE_256, 256)          \
  V(EXCEPT_HANDLER, 257)

enum Bytecode {
#define ENUM(name, value) name = value,
  FOREACH_BYTECODE(ENUM)
#undef ENUM
};

enum CompareOp {
  LT = 0,
  LE = 1,
  EQ = 2,
  NE = 3,
  GT = 4,
  GE = 5,
  IN,
  NOT_IN,
  IS,
  IS_NOT,
  EXC_MATCH,
  BAD
};

enum FormatValueFlag {
  FVC_MASK = 0x3,
  FVC_NONE = 0x0,
  FVC_STR = 0x1,
  FVC_REPR = 0x2,
  FVC_ASCII = 0x3,
  FVS_MASK = 0x4,
  FVS_HAVE_SPEC = 0x4
};

namespace bytecode {
const char* name(Bytecode);
}

} // namespace python
