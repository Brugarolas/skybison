diff --git a/library/builtins_type_test.py b/library/builtins_type_test.py
--- a/library/builtins_type_test.py
+++ b/library/builtins_type_test.py
@@ -1409,6 +1409,30 @@ class DunderSlotsTests(unittest.TestCase
             "descriptor 'x' for 'C' objects doesn't apply to a 'E' object",
         )
 
+    def test_private_names_are_mangled(self):
+        class C:
+            __slots__ = ("__priv", "__priv_")
+
+            def __init__(self):
+                self.__priv = 42
+                self.__priv_ = 8
+
+        c = C()
+        self.assertEqual(c._C__priv, 42)
+        self.assertEqual(c._C__priv_, 8)
+
+    def test_names_are_not_mangled(self):
+        class C:
+            __slots__ = ("_notpriv", "__notpriv__")
+
+            def __init__(self):
+                self._notpriv = "foo"
+                self.__notpriv__ = "bar"
+
+        c = C()
+        self.assertEqual(c._notpriv, "foo")
+        self.assertEqual(c.__notpriv__, "bar")
+
 
 if __name__ == "__main__":
     unittest.main()
diff --git a/runtime/type-builtins.cpp b/runtime/type-builtins.cpp
--- a/runtime/type-builtins.cpp
+++ b/runtime/type-builtins.cpp
@@ -4,6 +4,7 @@
 #include "builtins.h"
 #include "bytecode.h"
 #include "capi.h"
+#include "compile-utils.h"
 #include "dict-builtins.h"
 #include "frame.h"
 #include "globals.h"
@@ -622,6 +623,7 @@ static RawObject validateSlots(Thread* t
   List result(&scope, runtime->newList());
   Object slot_obj(&scope, NoneType::object());
   Str slot_str(&scope, Str::empty());
+  Object type_name(&scope, type.name());
   for (word i = 0; i < slots_len; i++) {
     slot_obj = slots.at(i);
     if (!runtime->isInstanceOfStr(*slot_obj)) {
@@ -629,12 +631,13 @@ static RawObject validateSlots(Thread* t
                                   "__slots__ items must be strings, not '%T'",
                                   &slot_obj);
     }
-    slot_str = *slot_obj;
+    slot_str = strUnderlying(*slot_obj);
     if (!strIsIdentifier(slot_str)) {
       return thread->raiseWithFmt(LayoutId::kTypeError,
                                   "__slots__ must be identifiers");
     }
-    slot_str = attributeName(thread, slot_str);
+    slot_str = mangle(thread, type_name, slot_str);
+    slot_str = Runtime::internStr(thread, slot_str);
     if (slot_str == dunder_dict) {
       if (base_has_instance_dict || *add_instance_dict) {
         return thread->raiseWithFmt(
